name: String Concatination
headline: A benchmark to compare the performance of different string concatination implementations in Go.
description: >
  The classic string concatination is done by using the `+` operator.
  This implementation works fine in the most cases, but it has some drawbacks.
  One of them is that it is not very fast.
  A solution is to use the `strings.Builder` or `buffer.Bytes` type.
  This benchmark shows which implementation is the fastest, in which use-case.
  For every run, the final string is increased by the same string. This makes sure, that the final string increases over time, to visualize the performance differences.

tags:
  - string
  - concatination
  - append

contributors:
  - MarvinJWendt

meta:
  - implementation: Append To Slice And Join
    description: >
      This implementation uses the `append` function to append the strings to a slice.
      After that, the `strings.Join` function is used to join the strings together.

  - implementation: Buffer
    description: >
      This implementation uses the `bytes.Buffer` type to append the strings.
      After that, the `buffer.String` function is used to get the final string.

  - implementation: Simple Append
    description: >
      This implementation uses the `+` operator to append the strings together.

  - implementation: String Builder
    description: >
      This implementation uses the `strings.Builder` type to append the strings.
      After that, the `builder.String` function is used to get the final string.
